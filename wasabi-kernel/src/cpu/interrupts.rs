//! kernel utilities/handlers for interrupts

#[allow(unused_imports)]
use log::{debug, error, info, warn};

use crate::{cpu::gdt::DOUBLE_FAULT_IST_INDEX, locals};
use interrupt_fn_builder::exception_fn;
use lazy_static::lazy_static;
use shared::sizes::KiB;
use x86_64::structures::idt::{InterruptDescriptorTable, InterruptStackFrame};

lazy_static! {
    /// The interrupt descriptor table used by this kernel
    static ref IDT: InterruptDescriptorTable = {
        let mut idt = InterruptDescriptorTable::new();
        // init_all_default must be called first or otherwise, this will
        // override any interrupts
        default_handlers::init_all_default_interrupt_handlers(&mut idt);
        idt.breakpoint.set_handler_fn(breakpoint_handler);
        unsafe {
            // we have to manually set double_fault in order to set the stack index
            idt.double_fault
                .set_handler_fn(default_handlers::double_fault)
                // safety: [DOUBLE_FAULT_IST_INDEX] is a valid stack index
                .set_stack_index(DOUBLE_FAULT_IST_INDEX);
        }
        idt
    };
}

/// setup idt and enable interrupts
pub fn init() {
    info!("Load IDT");
    IDT.load();

    unsafe {
        debug!("interrupts are enabled starting now");
        // safety: this enables interrupts for the kernel after necessary
        // setup is finished
        locals!().enable_interrupts();

        assert!(locals!().interrupts_enabled());
    }
}

exception_fn!(breakpoint_handler, stack_frame, {
    warn!("breakpoint hit at\n{stack_frame:#?}");
});

/// the stack size for the double fault exception stack
///
/// DF uses a separate stack, in case DF was caused by a stack overflow
pub const DOUBLE_FAULT_STACK_SIZE: usize = KiB(4 * 5);

/// generic interrupt handler, that is called for any interrupt handler with
/// `interrupt_vector >= 32`.
fn interrupt_handler(interrupt_vector: u8, int_stack_frame: InterruptStackFrame) {
    panic!("Interrupt {interrupt_vector} not handled: \n{int_stack_frame:#?}");
}

// docs are hiden, because this module "only" contains autogenerated interrupt handlers
// "auto generated" here means created by macros.
// there is also [default_handler::init_all_default_interrupt_handlers] which is not
// autogenerated, but only sets them as the handlers in the IDT.
#[doc(hidden)]
mod default_handlers;
